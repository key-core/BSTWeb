@{
    ViewBag.Title = "Descuentos usuarios";
}

<hgroup class="title">
    <h1>@ViewBag.Title.</h1>
</hgroup>

@(Html.Kendo().Grid<MedinetWeb.Models.MirrorEntityModel.MMW_DescuentosUsuarios>()
    // Grid Name
    .Name("Grid")
    
    // Declare grid column
    .Columns(columns =>
                 {
                     // Cretae all the columns base on Model
                     columns.Bound(r => r.ID_DescuentosUsuarios).Title("ID")
                         .Width(50);
                     columns.ForeignKey(p => p.ID_Ciclo, (System.Collections.IEnumerable)ViewData["dvCiclos"], "ID", "TX")
                        .Title("Ciclo")
                        .Width(100)
                        .EditorTemplateName("IDCiclosUltimos");
                     columns.ForeignKey(p => p.ID_Usuario, (System.Collections.IEnumerable)ViewData["dvUsuarios"], "ID", "TX")
                        .Title("Usuario")
                        .Width(200)
                        .EditorTemplateName("IDUsuarios");
                     columns.ForeignKey(p => p.ID_ConceptoDescuento, (System.Collections.IEnumerable)ViewData["dvConceptoDescuentos"], "ID", "TX")
                         .Title("Concepto descuento")
                         .Width(200)
                         .EditorTemplateName("IDConceptoDescuentos");
                     columns.Bound(r => r.FE_DescuentoIni).Title("Fecha inicio")
                        .Width(130)
                        .Format("{0:dd/MM/yyyy}");
                     columns.Bound(r => r.FE_DescuentoFin).Title("Fecha fin")
                         .Width(130)
                         .Format("{0:dd/MM/yyyy}");
                     columns.Bound(r => r.BO_MedioDia).Title("Medio día")
                         .Width(110)
                         .ClientTemplate("<input type='checkbox' #= BO_MedioDia ? checked='checked' : '' # disabled='disabled'}></input>");
                     columns.Bound(r => r.NU_TotalDescuento).Title("Dias desc.")
                         .Width(110)
                         .HtmlAttributes(new { style = "text-align:right" })
                         .EditorTemplateName("CurrencyEnableFalseSpinnersFalse");
                     columns.Bound(r => r.TX_Comentario).Title("Comentario")
                         .Width(250);

                     // Edit and Delete button column
                     columns.Command(command =>
                                         {
                                             command.Edit().Text("Editar");
                                             command.Destroy().Text("Eliminar");
                                         }).Width(180);
                 })
                 
    // Declare ajax datasource.
    // CRUD operation are wired back to ASP MVC Controller/Action e.g. HomeController, GetAll
    // Set the model Id
    .DataSource(datasoure => datasoure.Ajax()
                                .Events(events => events.Error("GridError"))
                                
                                .Model(model =>
                                    {
                                        model.Id(record => record.ID_DescuentosUsuarios);
                                        model.Field(record => record.ID_Usuario)
                                            .DefaultValue((Int32)Membership.GetUser().ProviderUserKey)
                                            .Editable(false);
                                    }
                                )
                                .Read(read => read.Action("GetAll", "DescuentosUsuarios"))
                                .Create(create => create.Action("Add", "DescuentosUsuarios"))
                                .Update(update => update.Action("Update", "DescuentosUsuarios"))
                                .Destroy(delete => delete.Action("Delete", "DescuentosUsuarios"))
                                .PageSize(5)
    )
    
    .Events(e => e.Edit("onEdit").Save("onSave"))

    // Add tool bar with Create button
    .ToolBar(toolbar => toolbar.Create().Text("Agregar registro"))

    // Set grid editable.
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    
    // Set grid sortable.
    .Sortable()
    
    // Set grid selectable.
    .Selectable()
    
    // Set grid groupable.
    .Groupable()
    
    // Set grid filterable.
    .Filterable()    

    // Set grid Scrollable.
    .Scrollable(scrolling => scrolling.Enabled(true).Height(220))

    // Set grid pagable.
    .Pageable(pageable =>
                  {
                      pageable.Refresh(true);
                      pageable.PageSizes(true);
                  })
)

<script>
    var functionCreated = 0;
    function onEdit(e) {
        functionCreated = 0;
        if (functionCreated == 0) {
            var gridGral = e.sender.wrapper.closest(".k-grid").data("kendoGrid");
            gridGral.tbody.on("change", ".check-box", function (e) {
                var ciclo = $('#ID_Ciclo').val();
                if (ciclo == 0) {
                    e.preventDefault();
                    alert("Debe seleccionar un ciclo.");
                }
                else {
                    var row = $(e.target).closest("tr");
                    var dataItem = gridGral.dataItem(row);

                    var iniDate = $("#FE_DescuentoIni").data("kendoDatePicker"),
                        endDate = $("#FE_DescuentoFin").data("kendoDatePicker");
                    iniDate.max(endDate.value());
                    endDate.min(iniDate.value());

                    var val = dataItem.BO_MedioDia == true ? 0.5 : 0;
                    var dayDiff = Math.ceil((endDate.value() - iniDate.value()) / (1000 * 60 * 60 * 24)) + 1 - val;
                    dataItem.set('NU_TotalDescuento', dayDiff);
                }

                //var row = $(e.target).closest("tr");
                //var item = gridGral.dataItem(row);

                //var currentlyValue = item.NU_TotalDescuento;

                //if ($(e.target).is(":checked") ? true : false) {
                //    item.set("NU_TotalDescuento", currentlyValue - 0.5);
                //}
                //else {
                //    item.set("NU_TotalDescuento", currentlyValue + 0.5);
                //}
            });

            var dpIniDate = $("#FE_DescuentoIni").data("kendoDatePicker"),
                dpEndDate = $("#FE_DescuentoFin").data("kendoDatePicker"),
                ddCiclo = $("#ID_Ciclo").data("kendoDropDownList");

            ddCiclo.bind("change", function (e) {
                var iniDate = $("#FE_DescuentoIni").data("kendoDatePicker"),
                    endDate = $("#FE_DescuentoFin").data("kendoDatePicker");

                var ciclo = $('#ID_Ciclo').val();

                $.ajax({
                    type: "GET",
                    url: "./DescuentosUsuarios/GetMinDate",
                    data: "ciclo=" + ciclo,
                    success: function (data) {
                        iniDate.min(new Date(data.ano, data.mes, data.dia));
                        endDate.min(new Date(data.ano, data.mes, data.dia));
                    }
                });

                $.ajax({
                    type: "GET",
                    url: "./DescuentosUsuarios/GetMaxDate",
                    data: "ciclo=" + ciclo,
                    success: function (data) {
                        iniDate.max(new Date(data.ano, data.mes, data.dia));
                        endDate.max(new Date(data.ano, data.mes, data.dia));
                    }
                });

                //$.getJSON("./DescuentosUsuarios/GetMaxDate", { ciclo: ciclo },
                //    function (data) {
                //        iniDate.max(new Date(data.ano, data.mes, data.dia));
                //        endDate.max(new Date(data.ano, data.mes, data.dia));
                //    });

                //$("#FE_DescuentoIni").change();
                //$("#FE_DescuentoFin").change();
            })

            dpIniDate.bind("change", function (e) {
                var ciclo = $('#ID_Ciclo').val();
                if (ciclo == 0) {
                    e.preventDefault();
                    alert("Debe seleccionar un ciclo.");
                }
                else {
                    var grid = e.sender.wrapper.closest(".k-grid").data("kendoGrid");
                    var dataItem = grid.dataItem(e.sender.wrapper.closest("tr"));

                    dpEndDate.min(dataItem.FE_DescuentoIni);

                    var val = dataItem.BO_MedioDia == true ? 0.5 : 0;
                    var dayDiff = Math.ceil((dataItem.FE_DescuentoFin - dataItem.FE_DescuentoIni) / (1000 * 60 * 60 * 24)) + 1 - val;
                    dataItem.set('NU_TotalDescuento', dayDiff);
                }
            })
            dpEndDate.bind("change", function (e) {
                var ciclo = $('#ID_Ciclo').val();
                if (ciclo == 0) {
                    e.preventDefault();
                    alert("Debe seleccionar un ciclo.");
                }
                else {
                    var grid = e.sender.wrapper.closest(".k-grid").data("kendoGrid");
                    var dataItem = grid.dataItem(e.sender.wrapper.closest("tr"));

                    dpIniDate.max(dataItem.FE_DescuentoFin);

                    var val = dataItem.BO_MedioDia == true ? 0.5 : 0;
                    var dayDiff = Math.ceil((dataItem.FE_DescuentoFin - dataItem.FE_DescuentoIni) / (1000 * 60 * 60 * 24)) + 1 - val;
                    dataItem.set('NU_TotalDescuento', dayDiff);
                }
            })

            dpIniDate.bind("open", function (e) {
                var ciclo = $('#ID_Ciclo').val();
                if (ciclo == 0) {
                    e.preventDefault();
                    alert("Debe seleccionar un ciclo.");
                }
                else {
                    var iniDate = $("#FE_DescuentoIni").data("kendoDatePicker"),
                    endDate = $("#FE_DescuentoFin").data("kendoDatePicker");

                    var ciclo = $('#ID_Ciclo').val();

                    $.ajax({
                        type: "GET",
                        url: "./DescuentosUsuarios/GetMinDate",
                        data: "ciclo=" + ciclo,
                        success: function (data) {
                            iniDate.min(new Date(data.ano, data.mes, data.dia));
                            endDate.min(new Date(data.ano, data.mes, data.dia));
                        }
                    });

                    $.ajax({
                        type: "GET",
                        url: "./DescuentosUsuarios/GetMaxDate",
                        data: "ciclo=" + ciclo,
                        success: function (data) {
                            iniDate.max(new Date(data.ano, data.mes, data.dia));
                            endDate.max(new Date(data.ano, data.mes, data.dia));
                        }
                    });
                    iniDate.max(new Date($("#FE_DescuentoFin").data("kendoDatePicker").value()));
                }
            })
            dpEndDate.bind("open", function (e) {
                var ciclo = $('#ID_Ciclo').val();
                if (ciclo == 0) {
                    e.preventDefault();
                    alert("Debe seleccionar un ciclo.");
                }
                else {
                    var iniDate = $("#FE_DescuentoIni").data("kendoDatePicker"),
                    endDate = $("#FE_DescuentoFin").data("kendoDatePicker");

                    var ciclo = $('#ID_Ciclo').val();

                    $.ajax({
                        type: "GET",
                        url: "./DescuentosUsuarios/GetMinDate",
                        data: "ciclo=" + ciclo,
                        success: function (data) {
                            iniDate.min(new Date(data.ano, data.mes, data.dia));
                            endDate.min(new Date(data.ano, data.mes, data.dia));
                        }
                    });

                    $.ajax({
                        type: "GET",
                        url: "./DescuentosUsuarios/GetMaxDate",
                        data: "ciclo=" + ciclo,
                        success: function (data) {
                            iniDate.max(new Date(data.ano, data.mes, data.dia));
                            endDate.max(new Date(data.ano, data.mes, data.dia));
                        }
                    });
                    endDate.min(new Date($("#FE_DescuentoIni").data("kendoDatePicker").value()));
                }
            })

            functionCreated = 1;
        }
    }

    function onSave(e) {
        var val = e.model.BO_MedioDia == true ? 0.5 : 0;
        var dayDiff = Math.ceil((e.model.FE_DescuentoFin - e.model.FE_DescuentoIni) / (1000 * 60 * 60 * 24)) + 1 - val;
        e.model.NU_TotalDescuento = dayDiff;

        //var grid = $("#Grid").data("kendoGrid");
        ////grid.dataSource.read();
        //grid.refresh();
    }
</script>
